"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _validateNpmPackageName = require("validate-npm-package-name");

var _validateNpmPackageName2 = _interopRequireDefault(_validateNpmPackageName);

var _bluebird = require("bluebird");

var _bluebird2 = _interopRequireDefault(_bluebird);

var _child_process = require("child_process");

require("babel/polyfill");

var resolve = _bluebird2["default"].Promise.promisify(require("resolve"));

var AutoInstallPlugin = (function () {
  function AutoInstallPlugin() {
    var config = arguments.length <= 0 || arguments[0] === undefined ? { save: true } : arguments[0];

    _classCallCheck(this, AutoInstallPlugin);

    this.config = config;
    this.resetMemory();
  }

  _createClass(AutoInstallPlugin, [{
    key: "resetMemory",
    value: function resetMemory() {
      this.memory = new Set();
    }
  }, {
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.plugin("done", this.resetMemory);

      compiler.resolvers.normal.plugin("module", function (req, next) {
        var packageName = req.request.split("/")[0];

        // Make sure we only install a package once
        if (_this.memory.has(packageName)) {
          return next();
        } else {
          _this.memory.add(packageName);
        }

        // Avoid trying to install packages with invalid name
        if (!(0, _validateNpmPackageName2["default"])(packageName).validForNewPackages) {
          return next();
        }

        resolve(packageName, { basedir: req.path }).then(function (res) {
          next(); // Already installed
        })["catch"](function () {
          var command = _this.buildCommand(packageName);

          (0, _child_process.exec)(command, function (err, stdout, stderr) {
            if (err) return next();

            console.log(command);
            print(stdout.toString());

            resolve(packageName, { basedir: req.path }).then(function (_ref) {
              var _ref2 = _slicedToArray(_ref, 1);

              var path = _ref2[0];

              next(null, resolveRequest(req, path));
            })["catch"](function (err) {
              next();
            });
          });
        })["catch"](function (err) {
          next();
        });
      });
    }
  }, {
    key: "buildCommand",
    value: function buildCommand(packageName) {
      if (this.config.save) {
        return "npm install --save " + packageName;
      }

      return "npm install " + packageName;
    }
  }]);

  return AutoInstallPlugin;
})();

function resolveRequest(oldRequest, resolvedPath) {
  return Object.assign({}, oldRequest, {
    path: resolvedPath,
    resolved: true
  });
}

function print(output) {
  console.log(output.trim());
}

exports["default"] = AutoInstallPlugin;
module.exports = exports["default"];
