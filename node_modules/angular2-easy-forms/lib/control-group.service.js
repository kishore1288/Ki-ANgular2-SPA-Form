"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var forms_1 = require('@angular/forms');
var custom_validators_class_1 = require('./custom-validators.class');
var ControlGroupService = (function () {
    function ControlGroupService() {
    }
    ControlGroupService.prototype.create = function (questions) {
        var temp = {}, toReturn = {}, matches = [];
        questions.forEach(function (a) {
            var val = a.value || '', validators = null;
            if (a.validation) {
                if (Array.isArray(a.validation)) {
                    validators = [];
                    a.validation.forEach(function (i) { return validators.push(setValidator(i, a)); });
                }
                else
                    validators = setValidator(a.validation);
            }
            temp[a.key] = new forms_1.FormControl(val, validators);
        });
        toReturn['fbGroup'] = new forms_1.FormGroup(temp);
        if (matches.length)
            toReturn['matches'] = matches;
        return toReturn;
        function setValidator(item, original) {
            switch (item.type) {
                case 'required': return forms_1.Validators.required;
                case 'minLength': return forms_1.Validators.minLength(item.value);
                case 'maxLength': return forms_1.Validators.maxLength(item.value);
                case 'pattern': return forms_1.Validators.pattern(item.value);
                case 'custom': return item.value;
                case 'match':
                    matches.push({ toMatch: item.value, model: original.key });
                    return custom_validators_class_1.CustomValidators.match(item.value);
            }
        }
    };
    ControlGroupService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], ControlGroupService);
    return ControlGroupService;
}());
exports.ControlGroupService = ControlGroupService;
//# sourceMappingURL=control-group.service.js.map