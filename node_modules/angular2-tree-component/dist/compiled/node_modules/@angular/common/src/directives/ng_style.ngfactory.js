/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var import0 = require('@angular/common/src/directives/ng_style');
var import1 = require('@angular/core/src/change_detection/change_detection_util');
var import3 = require('@angular/core/src/linker/view_utils');
var Wrapper_NgStyle = (function () {
    function Wrapper_NgStyle(p0, p1, p2) {
        this._changed = false;
        this.context = new import0.NgStyle(p0, p1, p2);
        this._expr_0 = import1.UNINITIALIZED;
    }
    Wrapper_NgStyle.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_NgStyle.prototype.ngOnDestroy = function () {
    };
    Wrapper_NgStyle.prototype.check_ngStyle = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.ngStyle = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_NgStyle.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            this.context.ngDoCheck();
        }
        return changed;
    };
    Wrapper_NgStyle.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_NgStyle.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_NgStyle.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_NgStyle;
}());
exports.Wrapper_NgStyle = Wrapper_NgStyle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdfc3R5bGUubmdmYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vY29tcGlsZWQvbm9kZV9tb2R1bGVzL0Bhbmd1bGFyL2NvbW1vbi9zcmMvZGlyZWN0aXZlcy9uZ19zdHlsZS5uZ2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUNGLG9CQUFvQjs7QUFFckIsSUFBWSxPQUFPLFdBQU0seUNBQXlDLENBQUMsQ0FBQTtBQUNuRSxJQUFZLE9BQU8sV0FBTSwwREFBMEQsQ0FBQyxDQUFBO0FBRXBGLElBQVksT0FBTyxXQUFNLHFDQUFxQyxDQUFDLENBQUE7QUFDL0Q7SUFLRSx5QkFBWSxFQUFNLEVBQUMsRUFBTSxFQUFDLEVBQU07UUFDOUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7SUFDdkMsQ0FBQztJQUNELG9DQUFVLEdBQVYsVUFBVyxJQUF5QixFQUFDLGFBQWtDLEVBQUMsRUFBTTtJQUM5RSxDQUFDO0lBQ0QscUNBQVcsR0FBWDtJQUNBLENBQUM7SUFDRCx1Q0FBYSxHQUFiLFVBQWMsU0FBYSxFQUFDLGFBQXFCLEVBQUMsV0FBbUI7UUFDbkUsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoRixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztZQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7WUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7UUFDM0IsQ0FBQztJQUNILENBQUM7SUFDRCxtQ0FBUyxHQUFULFVBQVUsSUFBeUIsRUFBQyxFQUFNLEVBQUMsYUFBcUI7UUFDOUQsSUFBSSxPQUFPLEdBQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNoQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN0QixFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQUMsQ0FBQztRQUNqRCxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFDRCxtQ0FBUyxHQUFULFVBQVUsSUFBeUIsRUFBQyxhQUFrQyxFQUFDLEVBQU0sRUFBQyxhQUFxQjtJQUNuRyxDQUFDO0lBQ0QscUNBQVcsR0FBWCxVQUFZLFNBQWdCLEVBQUMsTUFBVTtRQUNyQyxJQUFJLE1BQU0sR0FBVyxJQUFJLENBQUM7UUFDMUIsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBQ0QsbUNBQVMsR0FBVCxVQUFVLElBQXlCLEVBQUMsYUFBaUI7UUFDbkQsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7SUFDckMsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FBQyxBQXBDRCxJQW9DQztBQXBDWSx1QkFBZSxrQkFvQzNCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSB0aGUgQW5ndWxhciAyIHRlbXBsYXRlIGNvbXBpbGVyLlxuICogRG8gbm90IGVkaXQuXG4gKiBAc3VwcHJlc3Mge3N1c3BpY2lvdXNDb2RlLHVzZWxlc3NDb2RlLG1pc3NpbmdQcm9wZXJ0aWVzfVxuICovXG4gLyogdHNsaW50OmRpc2FibGUgKi9cblxuaW1wb3J0ICogYXMgaW1wb3J0MCBmcm9tICdAYW5ndWxhci9jb21tb24vc3JjL2RpcmVjdGl2ZXMvbmdfc3R5bGUnO1xuaW1wb3J0ICogYXMgaW1wb3J0MSBmcm9tICdAYW5ndWxhci9jb3JlL3NyYy9jaGFuZ2VfZGV0ZWN0aW9uL2NoYW5nZV9kZXRlY3Rpb25fdXRpbCc7XG5pbXBvcnQgKiBhcyBpbXBvcnQyIGZyb20gJ0Bhbmd1bGFyL2NvcmUvc3JjL2xpbmtlci92aWV3JztcbmltcG9ydCAqIGFzIGltcG9ydDMgZnJvbSAnQGFuZ3VsYXIvY29yZS9zcmMvbGlua2VyL3ZpZXdfdXRpbHMnO1xuZXhwb3J0IGNsYXNzIFdyYXBwZXJfTmdTdHlsZSB7XG4gIC8qcHJpdmF0ZSovIF9ldmVudEhhbmRsZXI6RnVuY3Rpb247XG4gIGNvbnRleHQ6aW1wb3J0MC5OZ1N0eWxlO1xuICAvKnByaXZhdGUqLyBfY2hhbmdlZDpib29sZWFuO1xuICAvKnByaXZhdGUqLyBfZXhwcl8wOmFueTtcbiAgY29uc3RydWN0b3IocDA6YW55LHAxOmFueSxwMjphbnkpIHtcbiAgICB0aGlzLl9jaGFuZ2VkID0gZmFsc2U7XG4gICAgdGhpcy5jb250ZXh0ID0gbmV3IGltcG9ydDAuTmdTdHlsZShwMCxwMSxwMik7XG4gICAgdGhpcy5fZXhwcl8wID0gaW1wb3J0MS5VTklOSVRJQUxJWkVEO1xuICB9XG4gIG5nT25EZXRhY2godmlldzppbXBvcnQyLkFwcFZpZXc8YW55Pixjb21wb25lbnRWaWV3OmltcG9ydDIuQXBwVmlldzxhbnk+LGVsOmFueSk6dm9pZCB7XG4gIH1cbiAgbmdPbkRlc3Ryb3koKTp2b2lkIHtcbiAgfVxuICBjaGVja19uZ1N0eWxlKGN1cnJWYWx1ZTphbnksdGhyb3dPbkNoYW5nZTpib29sZWFuLGZvcmNlVXBkYXRlOmJvb2xlYW4pOnZvaWQge1xuICAgIGlmICgoZm9yY2VVcGRhdGUgfHwgaW1wb3J0My5jaGVja0JpbmRpbmcodGhyb3dPbkNoYW5nZSx0aGlzLl9leHByXzAsY3VyclZhbHVlKSkpIHtcbiAgICAgIHRoaXMuX2NoYW5nZWQgPSB0cnVlO1xuICAgICAgdGhpcy5jb250ZXh0Lm5nU3R5bGUgPSBjdXJyVmFsdWU7XG4gICAgICB0aGlzLl9leHByXzAgPSBjdXJyVmFsdWU7XG4gICAgfVxuICB9XG4gIG5nRG9DaGVjayh2aWV3OmltcG9ydDIuQXBwVmlldzxhbnk+LGVsOmFueSx0aHJvd09uQ2hhbmdlOmJvb2xlYW4pOmJvb2xlYW4ge1xuICAgIHZhciBjaGFuZ2VkOmFueSA9IHRoaXMuX2NoYW5nZWQ7XG4gICAgdGhpcy5fY2hhbmdlZCA9IGZhbHNlO1xuICAgIGlmICghdGhyb3dPbkNoYW5nZSkgeyB0aGlzLmNvbnRleHQubmdEb0NoZWNrKCk7IH1cbiAgICByZXR1cm4gY2hhbmdlZDtcbiAgfVxuICBjaGVja0hvc3QodmlldzppbXBvcnQyLkFwcFZpZXc8YW55Pixjb21wb25lbnRWaWV3OmltcG9ydDIuQXBwVmlldzxhbnk+LGVsOmFueSx0aHJvd09uQ2hhbmdlOmJvb2xlYW4pOnZvaWQge1xuICB9XG4gIGhhbmRsZUV2ZW50KGV2ZW50TmFtZTpzdHJpbmcsJGV2ZW50OmFueSk6Ym9vbGVhbiB7XG4gICAgdmFyIHJlc3VsdDpib29sZWFuID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHN1YnNjcmliZSh2aWV3OmltcG9ydDIuQXBwVmlldzxhbnk+LF9ldmVudEhhbmRsZXI6YW55KTp2b2lkIHtcbiAgICB0aGlzLl9ldmVudEhhbmRsZXIgPSBfZXZlbnRIYW5kbGVyO1xuICB9XG59Il19