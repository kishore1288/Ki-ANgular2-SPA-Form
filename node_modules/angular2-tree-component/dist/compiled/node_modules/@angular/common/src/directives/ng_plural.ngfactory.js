/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var import0 = require('@angular/common/src/directives/ng_plural');
var import1 = require('@angular/core/src/change_detection/change_detection_util');
var import3 = require('@angular/core/src/linker/view_utils');
var Wrapper_NgPlural = (function () {
    function Wrapper_NgPlural(p0) {
        this._changed = false;
        this.context = new import0.NgPlural(p0);
        this._expr_0 = import1.UNINITIALIZED;
    }
    Wrapper_NgPlural.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_NgPlural.prototype.ngOnDestroy = function () {
    };
    Wrapper_NgPlural.prototype.check_ngPlural = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.ngPlural = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_NgPlural.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_NgPlural.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_NgPlural.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_NgPlural.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_NgPlural;
}());
exports.Wrapper_NgPlural = Wrapper_NgPlural;
var Wrapper_NgPluralCase = (function () {
    function Wrapper_NgPluralCase(p0, p1, p2, p3) {
        this._changed = false;
        this.context = new import0.NgPluralCase(p0, p1, p2, p3);
    }
    Wrapper_NgPluralCase.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_NgPluralCase.prototype.ngOnDestroy = function () {
    };
    Wrapper_NgPluralCase.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_NgPluralCase.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_NgPluralCase.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_NgPluralCase.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_NgPluralCase;
}());
exports.Wrapper_NgPluralCase = Wrapper_NgPluralCase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdfcGx1cmFsLm5nZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2NvbXBpbGVkL25vZGVfbW9kdWxlcy9AYW5ndWxhci9jb21tb24vc3JjL2RpcmVjdGl2ZXMvbmdfcGx1cmFsLm5nZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBQ0Ysb0JBQW9COztBQUVyQixJQUFZLE9BQU8sV0FBTSwwQ0FBMEMsQ0FBQyxDQUFBO0FBQ3BFLElBQVksT0FBTyxXQUFNLDBEQUEwRCxDQUFDLENBQUE7QUFFcEYsSUFBWSxPQUFPLFdBQU0scUNBQXFDLENBQUMsQ0FBQTtBQUMvRDtJQUtFLDBCQUFZLEVBQU07UUFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxxQ0FBVSxHQUFWLFVBQVcsSUFBeUIsRUFBQyxhQUFrQyxFQUFDLEVBQU07SUFDOUUsQ0FBQztJQUNELHNDQUFXLEdBQVg7SUFDQSxDQUFDO0lBQ0QseUNBQWMsR0FBZCxVQUFlLFNBQWEsRUFBQyxhQUFxQixFQUFDLFdBQW1CO1FBQ3BFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO1FBQzNCLENBQUM7SUFDSCxDQUFDO0lBQ0Qsb0NBQVMsR0FBVCxVQUFVLElBQXlCLEVBQUMsRUFBTSxFQUFDLGFBQXFCO1FBQzlELElBQUksT0FBTyxHQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDaEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBQ0Qsb0NBQVMsR0FBVCxVQUFVLElBQXlCLEVBQUMsYUFBa0MsRUFBQyxFQUFNLEVBQUMsYUFBcUI7SUFDbkcsQ0FBQztJQUNELHNDQUFXLEdBQVgsVUFBWSxTQUFnQixFQUFDLE1BQVU7UUFDckMsSUFBSSxNQUFNLEdBQVcsSUFBSSxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUNELG9DQUFTLEdBQVQsVUFBVSxJQUF5QixFQUFDLGFBQWlCO1FBQ25ELElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0lBQ3JDLENBQUM7SUFDSCx1QkFBQztBQUFELENBQUMsQUFuQ0QsSUFtQ0M7QUFuQ1ksd0JBQWdCLG1CQW1DNUIsQ0FBQTtBQUNEO0lBSUUsOEJBQVksRUFBTSxFQUFDLEVBQU0sRUFBQyxFQUFNLEVBQUMsRUFBTTtRQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBQ0QseUNBQVUsR0FBVixVQUFXLElBQXlCLEVBQUMsYUFBa0MsRUFBQyxFQUFNO0lBQzlFLENBQUM7SUFDRCwwQ0FBVyxHQUFYO0lBQ0EsQ0FBQztJQUNELHdDQUFTLEdBQVQsVUFBVSxJQUF5QixFQUFDLEVBQU0sRUFBQyxhQUFxQjtRQUM5RCxJQUFJLE9BQU8sR0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUNELHdDQUFTLEdBQVQsVUFBVSxJQUF5QixFQUFDLGFBQWtDLEVBQUMsRUFBTSxFQUFDLGFBQXFCO0lBQ25HLENBQUM7SUFDRCwwQ0FBVyxHQUFYLFVBQVksU0FBZ0IsRUFBQyxNQUFVO1FBQ3JDLElBQUksTUFBTSxHQUFXLElBQUksQ0FBQztRQUMxQixNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFDRCx3Q0FBUyxHQUFULFVBQVUsSUFBeUIsRUFBQyxhQUFpQjtRQUNuRCxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztJQUNyQyxDQUFDO0lBQ0gsMkJBQUM7QUFBRCxDQUFDLEFBMUJELElBMEJDO0FBMUJZLDRCQUFvQix1QkEwQmhDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSB0aGUgQW5ndWxhciAyIHRlbXBsYXRlIGNvbXBpbGVyLlxuICogRG8gbm90IGVkaXQuXG4gKiBAc3VwcHJlc3Mge3N1c3BpY2lvdXNDb2RlLHVzZWxlc3NDb2RlLG1pc3NpbmdQcm9wZXJ0aWVzfVxuICovXG4gLyogdHNsaW50OmRpc2FibGUgKi9cblxuaW1wb3J0ICogYXMgaW1wb3J0MCBmcm9tICdAYW5ndWxhci9jb21tb24vc3JjL2RpcmVjdGl2ZXMvbmdfcGx1cmFsJztcbmltcG9ydCAqIGFzIGltcG9ydDEgZnJvbSAnQGFuZ3VsYXIvY29yZS9zcmMvY2hhbmdlX2RldGVjdGlvbi9jaGFuZ2VfZGV0ZWN0aW9uX3V0aWwnO1xuaW1wb3J0ICogYXMgaW1wb3J0MiBmcm9tICdAYW5ndWxhci9jb3JlL3NyYy9saW5rZXIvdmlldyc7XG5pbXBvcnQgKiBhcyBpbXBvcnQzIGZyb20gJ0Bhbmd1bGFyL2NvcmUvc3JjL2xpbmtlci92aWV3X3V0aWxzJztcbmV4cG9ydCBjbGFzcyBXcmFwcGVyX05nUGx1cmFsIHtcbiAgLypwcml2YXRlKi8gX2V2ZW50SGFuZGxlcjpGdW5jdGlvbjtcbiAgY29udGV4dDppbXBvcnQwLk5nUGx1cmFsO1xuICAvKnByaXZhdGUqLyBfY2hhbmdlZDpib29sZWFuO1xuICAvKnByaXZhdGUqLyBfZXhwcl8wOmFueTtcbiAgY29uc3RydWN0b3IocDA6YW55KSB7XG4gICAgdGhpcy5fY2hhbmdlZCA9IGZhbHNlO1xuICAgIHRoaXMuY29udGV4dCA9IG5ldyBpbXBvcnQwLk5nUGx1cmFsKHAwKTtcbiAgICB0aGlzLl9leHByXzAgPSBpbXBvcnQxLlVOSU5JVElBTElaRUQ7XG4gIH1cbiAgbmdPbkRldGFjaCh2aWV3OmltcG9ydDIuQXBwVmlldzxhbnk+LGNvbXBvbmVudFZpZXc6aW1wb3J0Mi5BcHBWaWV3PGFueT4sZWw6YW55KTp2b2lkIHtcbiAgfVxuICBuZ09uRGVzdHJveSgpOnZvaWQge1xuICB9XG4gIGNoZWNrX25nUGx1cmFsKGN1cnJWYWx1ZTphbnksdGhyb3dPbkNoYW5nZTpib29sZWFuLGZvcmNlVXBkYXRlOmJvb2xlYW4pOnZvaWQge1xuICAgIGlmICgoZm9yY2VVcGRhdGUgfHwgaW1wb3J0My5jaGVja0JpbmRpbmcodGhyb3dPbkNoYW5nZSx0aGlzLl9leHByXzAsY3VyclZhbHVlKSkpIHtcbiAgICAgIHRoaXMuX2NoYW5nZWQgPSB0cnVlO1xuICAgICAgdGhpcy5jb250ZXh0Lm5nUGx1cmFsID0gY3VyclZhbHVlO1xuICAgICAgdGhpcy5fZXhwcl8wID0gY3VyclZhbHVlO1xuICAgIH1cbiAgfVxuICBuZ0RvQ2hlY2sodmlldzppbXBvcnQyLkFwcFZpZXc8YW55PixlbDphbnksdGhyb3dPbkNoYW5nZTpib29sZWFuKTpib29sZWFuIHtcbiAgICB2YXIgY2hhbmdlZDphbnkgPSB0aGlzLl9jaGFuZ2VkO1xuICAgIHRoaXMuX2NoYW5nZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gY2hhbmdlZDtcbiAgfVxuICBjaGVja0hvc3QodmlldzppbXBvcnQyLkFwcFZpZXc8YW55Pixjb21wb25lbnRWaWV3OmltcG9ydDIuQXBwVmlldzxhbnk+LGVsOmFueSx0aHJvd09uQ2hhbmdlOmJvb2xlYW4pOnZvaWQge1xuICB9XG4gIGhhbmRsZUV2ZW50KGV2ZW50TmFtZTpzdHJpbmcsJGV2ZW50OmFueSk6Ym9vbGVhbiB7XG4gICAgdmFyIHJlc3VsdDpib29sZWFuID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHN1YnNjcmliZSh2aWV3OmltcG9ydDIuQXBwVmlldzxhbnk+LF9ldmVudEhhbmRsZXI6YW55KTp2b2lkIHtcbiAgICB0aGlzLl9ldmVudEhhbmRsZXIgPSBfZXZlbnRIYW5kbGVyO1xuICB9XG59XG5leHBvcnQgY2xhc3MgV3JhcHBlcl9OZ1BsdXJhbENhc2Uge1xuICAvKnByaXZhdGUqLyBfZXZlbnRIYW5kbGVyOkZ1bmN0aW9uO1xuICBjb250ZXh0OmltcG9ydDAuTmdQbHVyYWxDYXNlO1xuICAvKnByaXZhdGUqLyBfY2hhbmdlZDpib29sZWFuO1xuICBjb25zdHJ1Y3RvcihwMDphbnkscDE6YW55LHAyOmFueSxwMzphbnkpIHtcbiAgICB0aGlzLl9jaGFuZ2VkID0gZmFsc2U7XG4gICAgdGhpcy5jb250ZXh0ID0gbmV3IGltcG9ydDAuTmdQbHVyYWxDYXNlKHAwLHAxLHAyLHAzKTtcbiAgfVxuICBuZ09uRGV0YWNoKHZpZXc6aW1wb3J0Mi5BcHBWaWV3PGFueT4sY29tcG9uZW50VmlldzppbXBvcnQyLkFwcFZpZXc8YW55PixlbDphbnkpOnZvaWQge1xuICB9XG4gIG5nT25EZXN0cm95KCk6dm9pZCB7XG4gIH1cbiAgbmdEb0NoZWNrKHZpZXc6aW1wb3J0Mi5BcHBWaWV3PGFueT4sZWw6YW55LHRocm93T25DaGFuZ2U6Ym9vbGVhbik6Ym9vbGVhbiB7XG4gICAgdmFyIGNoYW5nZWQ6YW55ID0gdGhpcy5fY2hhbmdlZDtcbiAgICB0aGlzLl9jaGFuZ2VkID0gZmFsc2U7XG4gICAgcmV0dXJuIGNoYW5nZWQ7XG4gIH1cbiAgY2hlY2tIb3N0KHZpZXc6aW1wb3J0Mi5BcHBWaWV3PGFueT4sY29tcG9uZW50VmlldzppbXBvcnQyLkFwcFZpZXc8YW55PixlbDphbnksdGhyb3dPbkNoYW5nZTpib29sZWFuKTp2b2lkIHtcbiAgfVxuICBoYW5kbGVFdmVudChldmVudE5hbWU6c3RyaW5nLCRldmVudDphbnkpOmJvb2xlYW4ge1xuICAgIHZhciByZXN1bHQ6Ym9vbGVhbiA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBzdWJzY3JpYmUodmlldzppbXBvcnQyLkFwcFZpZXc8YW55PixfZXZlbnRIYW5kbGVyOmFueSk6dm9pZCB7XG4gICAgdGhpcy5fZXZlbnRIYW5kbGVyID0gX2V2ZW50SGFuZGxlcjtcbiAgfVxufSJdfQ==