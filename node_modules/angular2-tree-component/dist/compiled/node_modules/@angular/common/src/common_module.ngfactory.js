/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import0 = require('@angular/core/src/linker/ng_module_factory');
var import1 = require('@angular/common/src/common_module');
var import2 = require('@angular/common/src/localization');
var import4 = require('@angular/core/src/i18n/tokens');
var CommonModuleInjector = (function (_super) {
    __extends(CommonModuleInjector, _super);
    function CommonModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    Object.defineProperty(CommonModuleInjector.prototype, "_NgLocalization_1", {
        get: function () {
            if ((this.__NgLocalization_1 == null)) {
                (this.__NgLocalization_1 = new import2.NgLocaleLocalization(this.parent.get(import4.LOCALE_ID)));
            }
            return this.__NgLocalization_1;
        },
        enumerable: true,
        configurable: true
    });
    CommonModuleInjector.prototype.createInternal = function () {
        this._CommonModule_0 = new import1.CommonModule();
        return this._CommonModule_0;
    };
    CommonModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import1.CommonModule)) {
            return this._CommonModule_0;
        }
        if ((token === import2.NgLocalization)) {
            return this._NgLocalization_1;
        }
        return notFoundResult;
    };
    CommonModuleInjector.prototype.destroyInternal = function () {
    };
    return CommonModuleInjector;
}(import0.NgModuleInjector));
exports.CommonModuleNgFactory = new import0.NgModuleFactory(CommonModuleInjector, import1.CommonModule);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uX21vZHVsZS5uZ2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9jb21waWxlZC9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29tbW9uL3NyYy9jb21tb25fbW9kdWxlLm5nZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBQ0Ysb0JBQW9COzs7Ozs7O0FBRXJCLElBQVksT0FBTyxXQUFNLDRDQUE0QyxDQUFDLENBQUE7QUFDdEUsSUFBWSxPQUFPLFdBQU0sbUNBQW1DLENBQUMsQ0FBQTtBQUM3RCxJQUFZLE9BQU8sV0FBTSxrQ0FBa0MsQ0FBQyxDQUFBO0FBRTVELElBQVksT0FBTyxXQUFNLCtCQUErQixDQUFDLENBQUE7QUFDekQ7SUFBbUMsd0NBQThDO0lBRy9FLDhCQUFZLE1BQXVCO1FBQ2pDLGtCQUFNLE1BQU0sRUFBRSxFQUFZLEVBQUUsRUFBWSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUNELHNCQUFJLG1EQUFpQjthQUFyQjtZQUNFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQUMsQ0FBQztZQUM1SSxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDO1FBQ2pDLENBQUM7OztPQUFBO0lBQ0QsNkNBQWMsR0FBZDtRQUNFLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDbEQsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQztJQUNELDBDQUFXLEdBQVgsVUFBWSxLQUFTLEVBQUMsY0FBa0I7UUFDdEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQUMsQ0FBQztRQUN0RSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUFDLENBQUM7UUFDMUUsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBQ0QsOENBQWUsR0FBZjtJQUNBLENBQUM7SUFDSCwyQkFBQztBQUFELENBQUMsQUFyQkQsQ0FBbUMsT0FBTyxDQUFDLGdCQUFnQixHQXFCMUQ7QUFDWSw2QkFBcUIsR0FBaUQsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLG9CQUFvQixFQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IHRoZSBBbmd1bGFyIDIgdGVtcGxhdGUgY29tcGlsZXIuXG4gKiBEbyBub3QgZWRpdC5cbiAqIEBzdXBwcmVzcyB7c3VzcGljaW91c0NvZGUsdXNlbGVzc0NvZGUsbWlzc2luZ1Byb3BlcnRpZXN9XG4gKi9cbiAvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuXG5pbXBvcnQgKiBhcyBpbXBvcnQwIGZyb20gJ0Bhbmd1bGFyL2NvcmUvc3JjL2xpbmtlci9uZ19tb2R1bGVfZmFjdG9yeSc7XG5pbXBvcnQgKiBhcyBpbXBvcnQxIGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9zcmMvY29tbW9uX21vZHVsZSc7XG5pbXBvcnQgKiBhcyBpbXBvcnQyIGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9zcmMvbG9jYWxpemF0aW9uJztcbmltcG9ydCAqIGFzIGltcG9ydDMgZnJvbSAnQGFuZ3VsYXIvY29yZS9zcmMvZGkvaW5qZWN0b3InO1xuaW1wb3J0ICogYXMgaW1wb3J0NCBmcm9tICdAYW5ndWxhci9jb3JlL3NyYy9pMThuL3Rva2Vucyc7XG5jbGFzcyBDb21tb25Nb2R1bGVJbmplY3RvciBleHRlbmRzIGltcG9ydDAuTmdNb2R1bGVJbmplY3RvcjxpbXBvcnQxLkNvbW1vbk1vZHVsZT4ge1xuICBfQ29tbW9uTW9kdWxlXzA6aW1wb3J0MS5Db21tb25Nb2R1bGU7XG4gIF9fTmdMb2NhbGl6YXRpb25fMTppbXBvcnQyLk5nTG9jYWxlTG9jYWxpemF0aW9uO1xuICBjb25zdHJ1Y3RvcihwYXJlbnQ6aW1wb3J0My5JbmplY3Rvcikge1xuICAgIHN1cGVyKHBhcmVudCwoW10gYXMgYW55W10pLChbXSBhcyBhbnlbXSkpO1xuICB9XG4gIGdldCBfTmdMb2NhbGl6YXRpb25fMSgpOmltcG9ydDIuTmdMb2NhbGVMb2NhbGl6YXRpb24ge1xuICAgIGlmICgodGhpcy5fX05nTG9jYWxpemF0aW9uXzEgPT0gbnVsbCkpIHsgKHRoaXMuX19OZ0xvY2FsaXphdGlvbl8xID0gbmV3IGltcG9ydDIuTmdMb2NhbGVMb2NhbGl6YXRpb24odGhpcy5wYXJlbnQuZ2V0KGltcG9ydDQuTE9DQUxFX0lEKSkpOyB9XG4gICAgcmV0dXJuIHRoaXMuX19OZ0xvY2FsaXphdGlvbl8xO1xuICB9XG4gIGNyZWF0ZUludGVybmFsKCk6aW1wb3J0MS5Db21tb25Nb2R1bGUge1xuICAgIHRoaXMuX0NvbW1vbk1vZHVsZV8wID0gbmV3IGltcG9ydDEuQ29tbW9uTW9kdWxlKCk7XG4gICAgcmV0dXJuIHRoaXMuX0NvbW1vbk1vZHVsZV8wO1xuICB9XG4gIGdldEludGVybmFsKHRva2VuOmFueSxub3RGb3VuZFJlc3VsdDphbnkpOmFueSB7XG4gICAgaWYgKCh0b2tlbiA9PT0gaW1wb3J0MS5Db21tb25Nb2R1bGUpKSB7IHJldHVybiB0aGlzLl9Db21tb25Nb2R1bGVfMDsgfVxuICAgIGlmICgodG9rZW4gPT09IGltcG9ydDIuTmdMb2NhbGl6YXRpb24pKSB7IHJldHVybiB0aGlzLl9OZ0xvY2FsaXphdGlvbl8xOyB9XG4gICAgcmV0dXJuIG5vdEZvdW5kUmVzdWx0O1xuICB9XG4gIGRlc3Ryb3lJbnRlcm5hbCgpOnZvaWQge1xuICB9XG59XG5leHBvcnQgY29uc3QgQ29tbW9uTW9kdWxlTmdGYWN0b3J5OmltcG9ydDAuTmdNb2R1bGVGYWN0b3J5PGltcG9ydDEuQ29tbW9uTW9kdWxlPiA9IG5ldyBpbXBvcnQwLk5nTW9kdWxlRmFjdG9yeShDb21tb25Nb2R1bGVJbmplY3RvcixpbXBvcnQxLkNvbW1vbk1vZHVsZSk7Il19