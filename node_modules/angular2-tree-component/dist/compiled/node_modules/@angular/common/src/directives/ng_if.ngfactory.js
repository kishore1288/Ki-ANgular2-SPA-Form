/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var import0 = require('@angular/common/src/directives/ng_if');
var import1 = require('@angular/core/src/change_detection/change_detection_util');
var import3 = require('@angular/core/src/linker/view_utils');
var Wrapper_NgIf = (function () {
    function Wrapper_NgIf(p0, p1) {
        this._changed = false;
        this.context = new import0.NgIf(p0, p1);
        this._expr_0 = import1.UNINITIALIZED;
    }
    Wrapper_NgIf.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_NgIf.prototype.ngOnDestroy = function () {
    };
    Wrapper_NgIf.prototype.check_ngIf = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.ngIf = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_NgIf.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_NgIf.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_NgIf.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_NgIf.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_NgIf;
}());
exports.Wrapper_NgIf = Wrapper_NgIf;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdfaWYubmdmYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vY29tcGlsZWQvbm9kZV9tb2R1bGVzL0Bhbmd1bGFyL2NvbW1vbi9zcmMvZGlyZWN0aXZlcy9uZ19pZi5uZ2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUNGLG9CQUFvQjs7QUFFckIsSUFBWSxPQUFPLFdBQU0sc0NBQXNDLENBQUMsQ0FBQTtBQUNoRSxJQUFZLE9BQU8sV0FBTSwwREFBMEQsQ0FBQyxDQUFBO0FBRXBGLElBQVksT0FBTyxXQUFNLHFDQUFxQyxDQUFDLENBQUE7QUFDL0Q7SUFLRSxzQkFBWSxFQUFNLEVBQUMsRUFBTTtRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxpQ0FBVSxHQUFWLFVBQVcsSUFBeUIsRUFBQyxhQUFrQyxFQUFDLEVBQU07SUFDOUUsQ0FBQztJQUNELGtDQUFXLEdBQVg7SUFDQSxDQUFDO0lBQ0QsaUNBQVUsR0FBVixVQUFXLFNBQWEsRUFBQyxhQUFxQixFQUFDLFdBQW1CO1FBQ2hFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO1lBQzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO1FBQzNCLENBQUM7SUFDSCxDQUFDO0lBQ0QsZ0NBQVMsR0FBVCxVQUFVLElBQXlCLEVBQUMsRUFBTSxFQUFDLGFBQXFCO1FBQzlELElBQUksT0FBTyxHQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDaEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBQ0QsZ0NBQVMsR0FBVCxVQUFVLElBQXlCLEVBQUMsYUFBa0MsRUFBQyxFQUFNLEVBQUMsYUFBcUI7SUFDbkcsQ0FBQztJQUNELGtDQUFXLEdBQVgsVUFBWSxTQUFnQixFQUFDLE1BQVU7UUFDckMsSUFBSSxNQUFNLEdBQVcsSUFBSSxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUNELGdDQUFTLEdBQVQsVUFBVSxJQUF5QixFQUFDLGFBQWlCO1FBQ25ELElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0lBQ3JDLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUFuQ0QsSUFtQ0M7QUFuQ1ksb0JBQVksZUFtQ3hCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSB0aGUgQW5ndWxhciAyIHRlbXBsYXRlIGNvbXBpbGVyLlxuICogRG8gbm90IGVkaXQuXG4gKiBAc3VwcHJlc3Mge3N1c3BpY2lvdXNDb2RlLHVzZWxlc3NDb2RlLG1pc3NpbmdQcm9wZXJ0aWVzfVxuICovXG4gLyogdHNsaW50OmRpc2FibGUgKi9cblxuaW1wb3J0ICogYXMgaW1wb3J0MCBmcm9tICdAYW5ndWxhci9jb21tb24vc3JjL2RpcmVjdGl2ZXMvbmdfaWYnO1xuaW1wb3J0ICogYXMgaW1wb3J0MSBmcm9tICdAYW5ndWxhci9jb3JlL3NyYy9jaGFuZ2VfZGV0ZWN0aW9uL2NoYW5nZV9kZXRlY3Rpb25fdXRpbCc7XG5pbXBvcnQgKiBhcyBpbXBvcnQyIGZyb20gJ0Bhbmd1bGFyL2NvcmUvc3JjL2xpbmtlci92aWV3JztcbmltcG9ydCAqIGFzIGltcG9ydDMgZnJvbSAnQGFuZ3VsYXIvY29yZS9zcmMvbGlua2VyL3ZpZXdfdXRpbHMnO1xuZXhwb3J0IGNsYXNzIFdyYXBwZXJfTmdJZiB7XG4gIC8qcHJpdmF0ZSovIF9ldmVudEhhbmRsZXI6RnVuY3Rpb247XG4gIGNvbnRleHQ6aW1wb3J0MC5OZ0lmO1xuICAvKnByaXZhdGUqLyBfY2hhbmdlZDpib29sZWFuO1xuICAvKnByaXZhdGUqLyBfZXhwcl8wOmFueTtcbiAgY29uc3RydWN0b3IocDA6YW55LHAxOmFueSkge1xuICAgIHRoaXMuX2NoYW5nZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNvbnRleHQgPSBuZXcgaW1wb3J0MC5OZ0lmKHAwLHAxKTtcbiAgICB0aGlzLl9leHByXzAgPSBpbXBvcnQxLlVOSU5JVElBTElaRUQ7XG4gIH1cbiAgbmdPbkRldGFjaCh2aWV3OmltcG9ydDIuQXBwVmlldzxhbnk+LGNvbXBvbmVudFZpZXc6aW1wb3J0Mi5BcHBWaWV3PGFueT4sZWw6YW55KTp2b2lkIHtcbiAgfVxuICBuZ09uRGVzdHJveSgpOnZvaWQge1xuICB9XG4gIGNoZWNrX25nSWYoY3VyclZhbHVlOmFueSx0aHJvd09uQ2hhbmdlOmJvb2xlYW4sZm9yY2VVcGRhdGU6Ym9vbGVhbik6dm9pZCB7XG4gICAgaWYgKChmb3JjZVVwZGF0ZSB8fCBpbXBvcnQzLmNoZWNrQmluZGluZyh0aHJvd09uQ2hhbmdlLHRoaXMuX2V4cHJfMCxjdXJyVmFsdWUpKSkge1xuICAgICAgdGhpcy5fY2hhbmdlZCA9IHRydWU7XG4gICAgICB0aGlzLmNvbnRleHQubmdJZiA9IGN1cnJWYWx1ZTtcbiAgICAgIHRoaXMuX2V4cHJfMCA9IGN1cnJWYWx1ZTtcbiAgICB9XG4gIH1cbiAgbmdEb0NoZWNrKHZpZXc6aW1wb3J0Mi5BcHBWaWV3PGFueT4sZWw6YW55LHRocm93T25DaGFuZ2U6Ym9vbGVhbik6Ym9vbGVhbiB7XG4gICAgdmFyIGNoYW5nZWQ6YW55ID0gdGhpcy5fY2hhbmdlZDtcbiAgICB0aGlzLl9jaGFuZ2VkID0gZmFsc2U7XG4gICAgcmV0dXJuIGNoYW5nZWQ7XG4gIH1cbiAgY2hlY2tIb3N0KHZpZXc6aW1wb3J0Mi5BcHBWaWV3PGFueT4sY29tcG9uZW50VmlldzppbXBvcnQyLkFwcFZpZXc8YW55PixlbDphbnksdGhyb3dPbkNoYW5nZTpib29sZWFuKTp2b2lkIHtcbiAgfVxuICBoYW5kbGVFdmVudChldmVudE5hbWU6c3RyaW5nLCRldmVudDphbnkpOmJvb2xlYW4ge1xuICAgIHZhciByZXN1bHQ6Ym9vbGVhbiA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBzdWJzY3JpYmUodmlldzppbXBvcnQyLkFwcFZpZXc8YW55PixfZXZlbnRIYW5kbGVyOmFueSk6dm9pZCB7XG4gICAgdGhpcy5fZXZlbnRIYW5kbGVyID0gX2V2ZW50SGFuZGxlcjtcbiAgfVxufSJdfQ==