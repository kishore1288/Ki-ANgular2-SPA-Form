/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var import0 = require('@angular/common/src/directives/ng_switch');
var import1 = require('@angular/core/src/change_detection/change_detection_util');
var import3 = require('@angular/core/src/linker/view_utils');
var Wrapper_NgSwitch = (function () {
    function Wrapper_NgSwitch() {
        this._changed = false;
        this.context = new import0.NgSwitch();
        this._expr_0 = import1.UNINITIALIZED;
    }
    Wrapper_NgSwitch.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_NgSwitch.prototype.ngOnDestroy = function () {
    };
    Wrapper_NgSwitch.prototype.check_ngSwitch = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.ngSwitch = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_NgSwitch.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_NgSwitch.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_NgSwitch.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_NgSwitch.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_NgSwitch;
}());
exports.Wrapper_NgSwitch = Wrapper_NgSwitch;
var Wrapper_NgSwitchCase = (function () {
    function Wrapper_NgSwitchCase(p0, p1, p2) {
        this._changed = false;
        this.context = new import0.NgSwitchCase(p0, p1, p2);
        this._expr_0 = import1.UNINITIALIZED;
    }
    Wrapper_NgSwitchCase.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_NgSwitchCase.prototype.ngOnDestroy = function () {
    };
    Wrapper_NgSwitchCase.prototype.check_ngSwitchCase = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.ngSwitchCase = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_NgSwitchCase.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            this.context.ngDoCheck();
        }
        return changed;
    };
    Wrapper_NgSwitchCase.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_NgSwitchCase.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_NgSwitchCase.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_NgSwitchCase;
}());
exports.Wrapper_NgSwitchCase = Wrapper_NgSwitchCase;
var Wrapper_NgSwitchDefault = (function () {
    function Wrapper_NgSwitchDefault(p0, p1, p2) {
        this._changed = false;
        this.context = new import0.NgSwitchDefault(p0, p1, p2);
    }
    Wrapper_NgSwitchDefault.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_NgSwitchDefault.prototype.ngOnDestroy = function () {
    };
    Wrapper_NgSwitchDefault.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_NgSwitchDefault.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_NgSwitchDefault.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_NgSwitchDefault.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_NgSwitchDefault;
}());
exports.Wrapper_NgSwitchDefault = Wrapper_NgSwitchDefault;
//# sourceMappingURL=data:application/json;base64,