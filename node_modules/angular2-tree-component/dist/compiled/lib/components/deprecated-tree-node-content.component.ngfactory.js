/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import0 = require('../../../lib/components/deprecated-tree-node-content.component');
var import1 = require('@angular/core/src/change_detection/change_detection_util');
var import2 = require('@angular/core/src/linker/view');
var import3 = require('@angular/core/src/linker/view_utils');
var import5 = require('@angular/core/src/metadata/view');
var import6 = require('@angular/core/src/linker/view_container');
var import7 = require('@angular/core/src/linker/view_type');
var import8 = require('@angular/core/src/change_detection/constants');
var import9 = require('@angular/core/src/linker/component_factory');
var import10 = require('../../../lib/models/tree.model');
var import11 = require('@angular/core/src/linker/component_factory_resolver');
var import12 = require('../../../lib/components/adhoc-component-factory.service');
var Wrapper_TreeNodeContent = (function () {
    function Wrapper_TreeNodeContent(p0, p1, p2, p3) {
        this._changed = false;
        this.context = new import0.TreeNodeContent(p0, p1, p2, p3);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
    }
    Wrapper_TreeNodeContent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_TreeNodeContent.prototype.ngOnDestroy = function () {
    };
    Wrapper_TreeNodeContent.prototype.check_node = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.node = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_TreeNodeContent.prototype.check_treeNodeContentTemplate = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.treeNodeContentTemplate = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_TreeNodeContent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_TreeNodeContent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_TreeNodeContent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_TreeNodeContent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_TreeNodeContent;
}());
exports.Wrapper_TreeNodeContent = Wrapper_TreeNodeContent;
var renderType_TreeNodeContent_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
var View_TreeNodeContent_Host0 = (function (_super) {
    __extends(View_TreeNodeContent_Host0, _super);
    function View_TreeNodeContent_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_TreeNodeContent_Host0, renderType_TreeNodeContent_Host, import7.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import8.ChangeDetectorStatus.CheckAlways);
    }
    View_TreeNodeContent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'TreeNodeContent', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._vc_0 = new import6.ViewContainer(0, null, this, this._el_0);
        this.compView_0 = new View_TreeNodeContent0(this.viewUtils, this, 0, this._el_0);
        this._TreeNodeContent_0_5 = new Wrapper_TreeNodeContent(this.injectorGet(import10.TreeModel, this.parentIndex), this.injectorGet(import11.ComponentFactoryResolver, this.parentIndex), this._vc_0.vcRef, this.injectorGet(import12.AdHocComponentFactoryCreator, this.parentIndex));
        this.compView_0.create(this._TreeNodeContent_0_5.context);
        this._el_1 = this.renderer.createTemplateAnchor(null, null);
        this.init(this._el_1, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import9.ComponentRef_(0, this, this._el_0, this._TreeNodeContent_0_5.context);
    };
    View_TreeNodeContent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.TreeNodeContent) && (0 === requestNodeIndex))) {
            return this._TreeNodeContent_0_5.context;
        }
        return notFoundResult;
    };
    View_TreeNodeContent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._TreeNodeContent_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        this._vc_0.detectChangesInNestedViews(throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._TreeNodeContent_0_5.context.ngAfterViewInit();
            }
        }
    };
    View_TreeNodeContent_Host0.prototype.destroyInternal = function () {
        this._vc_0.destroyNestedViews();
        this.compView_0.destroy();
    };
    View_TreeNodeContent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._vc_0.nativeElement, ctx);
        this._vc_0.visitNestedViewRootNodes(cb, ctx);
        cb(this._el_1, ctx);
    };
    return View_TreeNodeContent_Host0;
}(import2.AppView));
exports.TreeNodeContentNgFactory = new import9.ComponentFactory('TreeNodeContent', View_TreeNodeContent_Host0, import0.TreeNodeContent);
var styles_TreeNodeContent = [];
var renderType_TreeNodeContent = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, styles_TreeNodeContent, {});
var View_TreeNodeContent0 = (function (_super) {
    __extends(View_TreeNodeContent0, _super);
    function View_TreeNodeContent0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_TreeNodeContent0, renderType_TreeNodeContent, import7.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import8.ChangeDetectorStatus.CheckAlways);
    }
    View_TreeNodeContent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this.init(null, (this.renderer.directRenderer ? null : []), null);
        return null;
    };
    return View_TreeNodeContent0;
}(import2.AppView));
exports.View_TreeNodeContent0 = View_TreeNodeContent0;
//# sourceMappingURL=data:application/json;base64,