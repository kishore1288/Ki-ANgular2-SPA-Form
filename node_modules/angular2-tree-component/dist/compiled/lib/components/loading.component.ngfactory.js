/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import0 = require('../../../lib/components/loading.component');
var import1 = require('@angular/core/src/change_detection/change_detection_util');
var import2 = require('@angular/core/src/linker/view');
var import3 = require('@angular/core/src/linker/view_utils');
var import5 = require('@angular/core/src/metadata/view');
var import6 = require('@angular/core/src/linker/view_type');
var import7 = require('@angular/core/src/change_detection/constants');
var import8 = require('@angular/core/src/linker/component_factory');
var import9 = require('@angular/core/src/linker/view_container');
var import10 = require('../../node_modules/@angular/common/src/directives/ng_if.ngfactory');
var import11 = require('../../node_modules/@angular/common/src/directives/ng_template_outlet.ngfactory');
var import12 = require('@angular/core/src/linker/template_ref');
var import13 = require('@angular/common/src/directives/ng_if');
var import14 = require('@angular/common/src/directives/ng_template_outlet');
var Wrapper_LoadingComponent = (function () {
    function Wrapper_LoadingComponent() {
        this._changed = false;
        this.context = new import0.LoadingComponent();
        this._expr_0 = import1.UNINITIALIZED;
    }
    Wrapper_LoadingComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_LoadingComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_LoadingComponent.prototype.check_loadingTemplate = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.loadingTemplate = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_LoadingComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_LoadingComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_LoadingComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_LoadingComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_LoadingComponent;
}());
exports.Wrapper_LoadingComponent = Wrapper_LoadingComponent;
var renderType_LoadingComponent_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
var View_LoadingComponent_Host0 = (function (_super) {
    __extends(View_LoadingComponent_Host0, _super);
    function View_LoadingComponent_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_LoadingComponent_Host0, renderType_LoadingComponent_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways);
    }
    View_LoadingComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'LoadingComponent', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_LoadingComponent0(this.viewUtils, this, 0, this._el_0);
        this._LoadingComponent_0_3 = new Wrapper_LoadingComponent();
        this.compView_0.create(this._LoadingComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import8.ComponentRef_(0, this, this._el_0, this._LoadingComponent_0_3.context);
    };
    View_LoadingComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.LoadingComponent) && (0 === requestNodeIndex))) {
            return this._LoadingComponent_0_3.context;
        }
        return notFoundResult;
    };
    View_LoadingComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._LoadingComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    View_LoadingComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    View_LoadingComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_LoadingComponent_Host0;
}(import2.AppView));
exports.LoadingComponentNgFactory = new import8.ComponentFactory('LoadingComponent', View_LoadingComponent_Host0, import0.LoadingComponent);
var styles_LoadingComponent = [];
var renderType_LoadingComponent = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, styles_LoadingComponent, {});
var View_LoadingComponent0 = (function (_super) {
    __extends(View_LoadingComponent0, _super);
    function View_LoadingComponent0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_LoadingComponent0, renderType_LoadingComponent, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways);
    }
    View_LoadingComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._anchor_0 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._vc_0 = new import9.ViewContainer(0, null, this, this._anchor_0);
        this._TemplateRef_0_5 = new import12.TemplateRef_(this, 0, this._anchor_0);
        this._NgIf_0_6 = new import10.Wrapper_NgIf(this._vc_0.vcRef, this._TemplateRef_0_5);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n  ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._vc_2 = new import9.ViewContainer(2, null, this, this._anchor_2);
        this._TemplateRef_2_5 = new import12.TemplateRef_(this, 2, this._anchor_2);
        this._NgTemplateOutlet_2_6 = new import11.Wrapper_NgTemplateOutlet(this._vc_2.vcRef);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._anchor_0,
            this._text_1,
            this._anchor_2
        ]), null);
        return null;
    };
    View_LoadingComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import12.TemplateRef) && (0 === requestNodeIndex))) {
            return this._TemplateRef_0_5;
        }
        if (((token === import13.NgIf) && (0 === requestNodeIndex))) {
            return this._NgIf_0_6.context;
        }
        if (((token === import12.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import14.NgTemplateOutlet) && (2 === requestNodeIndex))) {
            return this._NgTemplateOutlet_2_6.context;
        }
        return notFoundResult;
    };
    View_LoadingComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0_0_0 = !this.context.loadingTemplate;
        this._NgIf_0_6.check_ngIf(currVal_0_0_0, throwOnChange, false);
        this._NgIf_0_6.ngDoCheck(this, this._anchor_0, throwOnChange);
        var currVal_2_0_0 = this.context.loadingTemplate;
        this._NgTemplateOutlet_2_6.check_ngTemplateOutlet(currVal_2_0_0, throwOnChange, false);
        this._NgTemplateOutlet_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._vc_0.detectChangesInNestedViews(throwOnChange);
        this._vc_2.detectChangesInNestedViews(throwOnChange);
    };
    View_LoadingComponent0.prototype.destroyInternal = function () {
        this._vc_0.destroyNestedViews();
        this._vc_2.destroyNestedViews();
    };
    View_LoadingComponent0.prototype.createEmbeddedViewInternal = function (nodeIndex) {
        if ((nodeIndex == 0)) {
            return new View_LoadingComponent1(this.viewUtils, this, 0, this._anchor_0, this._vc_0);
        }
        if ((nodeIndex == 2)) {
            return new View_LoadingComponent2(this.viewUtils, this, 2, this._anchor_2, this._vc_2);
        }
        return null;
    };
    return View_LoadingComponent0;
}(import2.AppView));
exports.View_LoadingComponent0 = View_LoadingComponent0;
var View_LoadingComponent1 = (function (_super) {
    __extends(View_LoadingComponent1, _super);
    function View_LoadingComponent1(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        _super.call(this, View_LoadingComponent1, renderType_LoadingComponent, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    View_LoadingComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'span', import3.EMPTY_INLINE_ARRAY, null);
        this._text_1 = this.renderer.createText(this._el_0, 'loading...', null);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1
        ]), null);
        return null;
    };
    View_LoadingComponent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_LoadingComponent1;
}(import2.AppView));
var View_LoadingComponent2 = (function (_super) {
    __extends(View_LoadingComponent2, _super);
    function View_LoadingComponent2(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        _super.call(this, View_LoadingComponent2, renderType_LoadingComponent, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    View_LoadingComponent2.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.renderer.createTemplateAnchor(null, null);
        this.init(this._el_0, (this.renderer.directRenderer ? null : []), null);
        return null;
    };
    View_LoadingComponent2.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_LoadingComponent2;
}(import2.AppView));
//# sourceMappingURL=data:application/json;base64,