/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import0 = require('../../../lib/components/tree.component');
var import1 = require('@angular/core/src/change_detection/change_detection_util');
var import2 = require('@angular/core/src/linker/view');
var import3 = require('@angular/core/src/linker/view_utils');
var import5 = require('@angular/core/src/metadata/view');
var import6 = require('../../../lib/models/tree.model');
var import7 = require('@angular/core/src/linker/query_list');
var import8 = require('@angular/core/src/linker/view_type');
var import9 = require('@angular/core/src/change_detection/constants');
var import10 = require('@angular/core/src/linker/component_factory');
var import11 = require('@angular/core/src/linker/view_container');
var import12 = require('../../node_modules/@angular/common/src/directives/ng_for.ngfactory');
var import13 = require('@angular/core/src/linker/template_ref');
var import14 = require('@angular/core/src/change_detection/differs/iterable_differs');
var import15 = require('@angular/common/src/directives/ng_for');
var import16 = require('../../../lib/components/tree-node.component');
var import17 = require('./tree-node.component.ngfactory');
var import18 = require('@angular/core/src/linker/element_ref');
var Wrapper_TreeComponent = (function () {
    function Wrapper_TreeComponent(p0) {
        this._changed = false;
        this._changes = {};
        this.context = new import0.TreeComponent(p0);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
    }
    Wrapper_TreeComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_TreeComponent.prototype.ngOnDestroy = function () {
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
        (this.subscription2 && this.subscription2.unsubscribe());
        (this.subscription3 && this.subscription3.unsubscribe());
        (this.subscription4 && this.subscription4.unsubscribe());
        (this.subscription5 && this.subscription5.unsubscribe());
        (this.subscription6 && this.subscription6.unsubscribe());
        (this.subscription7 && this.subscription7.unsubscribe());
        (this.subscription8 && this.subscription8.unsubscribe());
        (this.subscription9 && this.subscription9.unsubscribe());
        (this.subscription10 && this.subscription10.unsubscribe());
        (this.subscription11 && this.subscription11.unsubscribe());
        (this.subscription12 && this.subscription12.unsubscribe());
    };
    Wrapper_TreeComponent.prototype.check_nodes = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.nodes = currValue;
            this._changes['nodes'] = new import1.SimpleChange(this._expr_0, currValue);
            this._expr_0 = currValue;
        }
    };
    Wrapper_TreeComponent.prototype.check_options = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.options = currValue;
            this._changes['options'] = new import1.SimpleChange(this._expr_1, currValue);
            this._expr_1 = currValue;
        }
    };
    Wrapper_TreeComponent.prototype.check_focused = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.focused = currValue;
            this._changes['focused'] = new import1.SimpleChange(this._expr_2, currValue);
            this._expr_2 = currValue;
        }
    };
    Wrapper_TreeComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this._changes);
                this._changes = {};
            }
        }
        return changed;
    };
    Wrapper_TreeComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_TreeComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'body:keydown')) {
            var pd_sub_0 = (this.context.onKeydown($event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'body:mousedown')) {
            var pd_sub_1 = (this.context.onMousedown($event) !== false);
            result = (pd_sub_1 && result);
        }
        return result;
    };
    Wrapper_TreeComponent.prototype.subscribe = function (view, _eventHandler, emit0, emit1, emit2, emit3, emit4, emit5, emit6, emit7, emit8, emit9, emit10, emit11, emit12) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.onToggle.subscribe(_eventHandler.bind(view, 'onToggle')));
        }
        if (emit1) {
            (this.subscription1 = this.context.onToggleExpanded.subscribe(_eventHandler.bind(view, 'onToggleExpanded')));
        }
        if (emit2) {
            (this.subscription2 = this.context.onActiveChanged.subscribe(_eventHandler.bind(view, 'onActiveChanged')));
        }
        if (emit3) {
            (this.subscription3 = this.context.onActivate.subscribe(_eventHandler.bind(view, 'onActivate')));
        }
        if (emit4) {
            (this.subscription4 = this.context.onDeactivate.subscribe(_eventHandler.bind(view, 'onDeactivate')));
        }
        if (emit5) {
            (this.subscription5 = this.context.onFocus.subscribe(_eventHandler.bind(view, 'onFocus')));
        }
        if (emit6) {
            (this.subscription6 = this.context.onBlur.subscribe(_eventHandler.bind(view, 'onBlur')));
        }
        if (emit7) {
            (this.subscription7 = this.context.onDoubleClick.subscribe(_eventHandler.bind(view, 'onDoubleClick')));
        }
        if (emit8) {
            (this.subscription8 = this.context.onContextMenu.subscribe(_eventHandler.bind(view, 'onContextMenu')));
        }
        if (emit9) {
            (this.subscription9 = this.context.onUpdateData.subscribe(_eventHandler.bind(view, 'onUpdateData')));
        }
        if (emit10) {
            (this.subscription10 = this.context.onInitialized.subscribe(_eventHandler.bind(view, 'onInitialized')));
        }
        if (emit11) {
            (this.subscription11 = this.context.onMoveNode.subscribe(_eventHandler.bind(view, 'onMoveNode')));
        }
        if (emit12) {
            (this.subscription12 = this.context.onEvent.subscribe(_eventHandler.bind(view, 'onEvent')));
        }
    };
    return Wrapper_TreeComponent;
}());
exports.Wrapper_TreeComponent = Wrapper_TreeComponent;
var renderType_TreeComponent_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
var View_TreeComponent_Host0 = (function (_super) {
    __extends(View_TreeComponent_Host0, _super);
    function View_TreeComponent_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_TreeComponent_Host0, renderType_TreeComponent_Host, import8.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckAlways);
    }
    View_TreeComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'Tree', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_TreeComponent0(this.viewUtils, this, 0, this._el_0);
        this._TreeModel_0_3 = new import6.TreeModel();
        this._TreeComponent_0_4 = new Wrapper_TreeComponent(this._TreeModel_0_3);
        this._query_loadingTemplate_0_0 = new import7.QueryList();
        this._query_treeNodeTemplate_0_1 = new import7.QueryList();
        this._query_loadingTemplate_0_0.reset([]);
        this._TreeComponent_0_4.context.loadingTemplate = this._query_loadingTemplate_0_0.first;
        this._query_treeNodeTemplate_0_1.reset([]);
        this._TreeComponent_0_4.context.treeNodeTemplate = this._query_treeNodeTemplate_0_1.first;
        this.compView_0.create(this._TreeComponent_0_4.context);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_0, new import3.InlineArray4(4, 'keydown', 'body', 'mousedown', 'body'), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), [disposable_0]);
        return new import10.ComponentRef_(0, this, this._el_0, this._TreeComponent_0_4.context);
    };
    View_TreeComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import6.TreeModel) && (0 === requestNodeIndex))) {
            return this._TreeModel_0_3;
        }
        if (((token === import0.TreeComponent) && (0 === requestNodeIndex))) {
            return this._TreeComponent_0_4.context;
        }
        return notFoundResult;
    };
    View_TreeComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._TreeComponent_0_4.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    View_TreeComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
        this._TreeComponent_0_4.ngOnDestroy();
    };
    View_TreeComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    View_TreeComponent_Host0.prototype.handleEvent_0 = function (eventName, $event) {
        this.compView_0.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._TreeComponent_0_4.handleEvent(eventName, $event) && result);
        return result;
    };
    return View_TreeComponent_Host0;
}(import2.AppView));
exports.TreeComponentNgFactory = new import10.ComponentFactory('Tree', View_TreeComponent_Host0, import0.TreeComponent);
var styles_TreeComponent = [
    '.tree-children { padding-left: 20px }',
    '.tree {\n      display: inline-block;\n      cursor: pointer;\n      -webkit-touch-callout: none; /* iOS Safari */\n      -webkit-user-select: none;   /* Chrome/Safari/Opera */\n      -khtml-user-select: none;    /* Konqueror */\n      -moz-user-select: none;      /* Firefox */\n      -ms-user-select: none;       /* IE/Edge */\n      user-select: none;           /* non-prefixed version, currently not supported by any browser */\n    }'
];
var renderType_TreeComponent = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, styles_TreeComponent, {});
var View_TreeComponent0 = (function (_super) {
    __extends(View_TreeComponent0, _super);
    function View_TreeComponent0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_TreeComponent0, renderType_TreeComponent, import8.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckAlways);
        this._expr_9 = import1.UNINITIALIZED;
    }
    View_TreeComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this._el_1 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'class', 'tree'), null);
        this._text_2 = this.renderer.createText(this._el_1, '\n      ', null);
        this._anchor_3 = this.renderer.createTemplateAnchor(this._el_1, null);
        this._vc_3 = new import11.ViewContainer(3, 1, this, this._anchor_3);
        this._TemplateRef_3_5 = new import13.TemplateRef_(this, 3, this._anchor_3);
        this._NgFor_3_6 = new import12.Wrapper_NgFor(this._vc_3.vcRef, this._TemplateRef_3_5, this.parentView.injectorGet(import14.IterableDiffers, this.parentIndex), this.ref);
        this._text_4 = this.renderer.createText(this._el_1, '\n    ', null);
        this._text_5 = this.renderer.createText(parentRenderNode, '\n  ', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._el_1,
            this._text_2,
            this._anchor_3,
            this._text_4,
            this._text_5
        ]), null);
        return null;
    };
    View_TreeComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import13.TemplateRef) && (3 === requestNodeIndex))) {
            return this._TemplateRef_3_5;
        }
        if (((token === import15.NgFor) && (3 === requestNodeIndex))) {
            return this._NgFor_3_6.context;
        }
        return notFoundResult;
    };
    View_TreeComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_3_0_0 = this.context.treeModel.roots;
        this._NgFor_3_6.check_ngForOf(currVal_3_0_0, throwOnChange, false);
        this._NgFor_3_6.ngDoCheck(this, this._anchor_3, throwOnChange);
        this._vc_3.detectChangesInNestedViews(throwOnChange);
        var currVal_9 = this.context.treeModel.isDragging();
        if (import3.checkBinding(throwOnChange, this._expr_9, currVal_9)) {
            this.renderer.setElementClass(this._el_1, 'node-dragging', currVal_9);
            this._expr_9 = currVal_9;
        }
    };
    View_TreeComponent0.prototype.destroyInternal = function () {
        this._vc_3.destroyNestedViews();
    };
    View_TreeComponent0.prototype.createEmbeddedViewInternal = function (nodeIndex) {
        if ((nodeIndex == 3)) {
            return new View_TreeComponent1(this.viewUtils, this, 3, this._anchor_3, this._vc_3);
        }
        return null;
    };
    return View_TreeComponent0;
}(import2.AppView));
exports.View_TreeComponent0 = View_TreeComponent0;
var View_TreeComponent1 = (function (_super) {
    __extends(View_TreeComponent1, _super);
    function View_TreeComponent1(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        _super.call(this, View_TreeComponent1, renderType_TreeComponent, import8.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import9.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    View_TreeComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'TreeNode', import3.EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new import17.View_TreeNodeComponent0(this.viewUtils, this, 0, this._el_0);
        this._TreeNodeComponent_0_3 = new import17.Wrapper_TreeNodeComponent(new import18.ElementRef(this._el_0));
        this._text_1 = this.renderer.createText(null, '\n      ', null);
        this.compView_0.create(this._TreeNodeComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1
        ]), null);
        return null;
    };
    View_TreeComponent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import16.TreeNodeComponent) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) {
            return this._TreeNodeComponent_0_3.context;
        }
        return notFoundResult;
    };
    View_TreeComponent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0_0_0 = this.context.$implicit;
        this._TreeNodeComponent_0_3.check_node(currVal_0_0_0, throwOnChange, false);
        var currVal_0_0_1 = this.context.index;
        this._TreeNodeComponent_0_3.check_nodeIndex(currVal_0_0_1, throwOnChange, false);
        var currVal_0_0_2 = this.parentView.context.treeNodeTemplate;
        this._TreeNodeComponent_0_3.check_treeNodeContentTemplate(currVal_0_0_2, throwOnChange, false);
        var currVal_0_0_3 = this.parentView.context.loadingTemplate;
        this._TreeNodeComponent_0_3.check_loadingTemplate(currVal_0_0_3, throwOnChange, false);
        this._TreeNodeComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._TreeNodeComponent_0_3.context.ngAfterViewInit();
            }
        }
    };
    View_TreeComponent1.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    View_TreeComponent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_TreeComponent1;
}(import2.AppView));
//# sourceMappingURL=data:application/json;base64,