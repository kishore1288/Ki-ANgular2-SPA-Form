/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import0 = require('../../../lib/components/tree-node-content.component');
var import1 = require('@angular/core/src/change_detection/change_detection_util');
var import2 = require('@angular/core/src/linker/view');
var import3 = require('@angular/core/src/linker/view_utils');
var import5 = require('@angular/core/src/metadata/view');
var import6 = require('@angular/core/src/linker/view_type');
var import7 = require('@angular/core/src/change_detection/constants');
var import8 = require('@angular/core/src/linker/component_factory');
var import9 = require('@angular/core/src/linker/view_container');
var import10 = require('../../node_modules/@angular/common/src/directives/ng_if.ngfactory');
var import11 = require('../../node_modules/@angular/common/src/directives/ng_template_outlet.ngfactory');
var import12 = require('@angular/core/src/linker/template_ref');
var import13 = require('@angular/common/src/directives/ng_if');
var import14 = require('@angular/common/src/directives/ng_template_outlet');
var Wrapper_TreeNodeContent = (function () {
    function Wrapper_TreeNodeContent() {
        this._changed = false;
        this.context = new import0.TreeNodeContent();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
    }
    Wrapper_TreeNodeContent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_TreeNodeContent.prototype.ngOnDestroy = function () {
    };
    Wrapper_TreeNodeContent.prototype.check_node = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.node = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_TreeNodeContent.prototype.check_treeNodeContentTemplate = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.treeNodeContentTemplate = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_TreeNodeContent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_TreeNodeContent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_TreeNodeContent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_TreeNodeContent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_TreeNodeContent;
}());
exports.Wrapper_TreeNodeContent = Wrapper_TreeNodeContent;
var renderType_TreeNodeContent_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
var View_TreeNodeContent_Host0 = (function (_super) {
    __extends(View_TreeNodeContent_Host0, _super);
    function View_TreeNodeContent_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_TreeNodeContent_Host0, renderType_TreeNodeContent_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways);
    }
    View_TreeNodeContent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'TreeNodeContent', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_TreeNodeContent0(this.viewUtils, this, 0, this._el_0);
        this._TreeNodeContent_0_3 = new Wrapper_TreeNodeContent();
        this.compView_0.create(this._TreeNodeContent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import8.ComponentRef_(0, this, this._el_0, this._TreeNodeContent_0_3.context);
    };
    View_TreeNodeContent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.TreeNodeContent) && (0 === requestNodeIndex))) {
            return this._TreeNodeContent_0_3.context;
        }
        return notFoundResult;
    };
    View_TreeNodeContent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._TreeNodeContent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    View_TreeNodeContent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    View_TreeNodeContent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_TreeNodeContent_Host0;
}(import2.AppView));
exports.TreeNodeContentNgFactory = new import8.ComponentFactory('TreeNodeContent', View_TreeNodeContent_Host0, import0.TreeNodeContent);
var styles_TreeNodeContent = [];
var renderType_TreeNodeContent = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, styles_TreeNodeContent, {});
var View_TreeNodeContent0 = (function (_super) {
    __extends(View_TreeNodeContent0, _super);
    function View_TreeNodeContent0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_TreeNodeContent0, renderType_TreeNodeContent, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways);
        this._map_9 = import3.pureProxy1(function (p0) {
            return { $implicit: p0 };
        });
    }
    View_TreeNodeContent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._anchor_0 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._vc_0 = new import9.ViewContainer(0, null, this, this._anchor_0);
        this._TemplateRef_0_5 = new import12.TemplateRef_(this, 0, this._anchor_0);
        this._NgIf_0_6 = new import10.Wrapper_NgIf(this._vc_0.vcRef, this._TemplateRef_0_5);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n  ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._vc_2 = new import9.ViewContainer(2, null, this, this._anchor_2);
        this._TemplateRef_2_5 = new import12.TemplateRef_(this, 2, this._anchor_2);
        this._NgTemplateOutlet_2_6 = new import11.Wrapper_NgTemplateOutlet(this._vc_2.vcRef);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._anchor_0,
            this._text_1,
            this._anchor_2
        ]), null);
        return null;
    };
    View_TreeNodeContent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import12.TemplateRef) && (0 === requestNodeIndex))) {
            return this._TemplateRef_0_5;
        }
        if (((token === import13.NgIf) && (0 === requestNodeIndex))) {
            return this._NgIf_0_6.context;
        }
        if (((token === import12.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import14.NgTemplateOutlet) && (2 === requestNodeIndex))) {
            return this._NgTemplateOutlet_2_6.context;
        }
        return notFoundResult;
    };
    View_TreeNodeContent0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0_0_0 = !this.context.treeNodeContentTemplate;
        this._NgIf_0_6.check_ngIf(currVal_0_0_0, throwOnChange, false);
        this._NgIf_0_6.ngDoCheck(this, this._anchor_0, throwOnChange);
        var currVal_2_0_0 = this._map_9(this.context.node);
        this._NgTemplateOutlet_2_6.check_ngOutletContext(currVal_2_0_0, throwOnChange, false);
        var currVal_2_0_1 = this.context.treeNodeContentTemplate;
        this._NgTemplateOutlet_2_6.check_ngTemplateOutlet(currVal_2_0_1, throwOnChange, false);
        this._NgTemplateOutlet_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._vc_0.detectChangesInNestedViews(throwOnChange);
        this._vc_2.detectChangesInNestedViews(throwOnChange);
    };
    View_TreeNodeContent0.prototype.destroyInternal = function () {
        this._vc_0.destroyNestedViews();
        this._vc_2.destroyNestedViews();
    };
    View_TreeNodeContent0.prototype.createEmbeddedViewInternal = function (nodeIndex) {
        if ((nodeIndex == 0)) {
            return new View_TreeNodeContent1(this.viewUtils, this, 0, this._anchor_0, this._vc_0);
        }
        if ((nodeIndex == 2)) {
            return new View_TreeNodeContent2(this.viewUtils, this, 2, this._anchor_2, this._vc_2);
        }
        return null;
    };
    return View_TreeNodeContent0;
}(import2.AppView));
exports.View_TreeNodeContent0 = View_TreeNodeContent0;
var View_TreeNodeContent1 = (function (_super) {
    __extends(View_TreeNodeContent1, _super);
    function View_TreeNodeContent1(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        _super.call(this, View_TreeNodeContent1, renderType_TreeNodeContent, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_2 = import1.UNINITIALIZED;
    }
    View_TreeNodeContent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'span', import3.EMPTY_INLINE_ARRAY, null);
        this._text_1 = this.renderer.createText(this._el_0, '', null);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1
        ]), null);
        return null;
    };
    View_TreeNodeContent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_2 = import3.inlineInterpolate(1, '', this.parentView.context.node.displayField, '');
        if (import3.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this.renderer.setText(this._text_1, currVal_2);
            this._expr_2 = currVal_2;
        }
    };
    View_TreeNodeContent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_TreeNodeContent1;
}(import2.AppView));
var View_TreeNodeContent2 = (function (_super) {
    __extends(View_TreeNodeContent2, _super);
    function View_TreeNodeContent2(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        _super.call(this, View_TreeNodeContent2, renderType_TreeNodeContent, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    View_TreeNodeContent2.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.renderer.createTemplateAnchor(null, null);
        this.init(this._el_0, (this.renderer.directRenderer ? null : []), null);
        return null;
    };
    View_TreeNodeContent2.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_TreeNodeContent2;
}(import2.AppView));
//# sourceMappingURL=data:application/json;base64,