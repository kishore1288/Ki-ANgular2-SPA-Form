/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import0 = require('../../../lib/components/deprecated-loading.component');
var import1 = require('@angular/core/src/change_detection/change_detection_util');
var import2 = require('@angular/core/src/linker/view');
var import3 = require('@angular/core/src/linker/view_utils');
var import5 = require('@angular/core/src/metadata/view');
var import6 = require('@angular/core/src/linker/view_container');
var import7 = require('@angular/core/src/linker/view_type');
var import8 = require('@angular/core/src/change_detection/constants');
var import9 = require('@angular/core/src/linker/component_factory');
var import10 = require('../../../lib/models/tree.model');
var import11 = require('@angular/core/src/linker/component_factory_resolver');
var import12 = require('../../../lib/components/adhoc-component-factory.service');
var Wrapper_LoadingComponent = (function () {
    function Wrapper_LoadingComponent(p0, p1, p2, p3) {
        this._changed = false;
        this.context = new import0.LoadingComponent(p0, p1, p2, p3);
        this._expr_0 = import1.UNINITIALIZED;
    }
    Wrapper_LoadingComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_LoadingComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_LoadingComponent.prototype.check_loadingTemplate = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.loadingTemplate = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_LoadingComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_LoadingComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_LoadingComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_LoadingComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_LoadingComponent;
}());
exports.Wrapper_LoadingComponent = Wrapper_LoadingComponent;
var renderType_LoadingComponent_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
var View_LoadingComponent_Host0 = (function (_super) {
    __extends(View_LoadingComponent_Host0, _super);
    function View_LoadingComponent_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_LoadingComponent_Host0, renderType_LoadingComponent_Host, import7.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import8.ChangeDetectorStatus.CheckAlways);
    }
    View_LoadingComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'LoadingComponent', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._vc_0 = new import6.ViewContainer(0, null, this, this._el_0);
        this.compView_0 = new View_LoadingComponent0(this.viewUtils, this, 0, this._el_0);
        this._LoadingComponent_0_5 = new Wrapper_LoadingComponent(this.injectorGet(import10.TreeModel, this.parentIndex), this.injectorGet(import11.ComponentFactoryResolver, this.parentIndex), this._vc_0.vcRef, this.injectorGet(import12.AdHocComponentFactoryCreator, this.parentIndex));
        this.compView_0.create(this._LoadingComponent_0_5.context);
        this._el_1 = this.renderer.createTemplateAnchor(null, null);
        this.init(this._el_1, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import9.ComponentRef_(0, this, this._el_0, this._LoadingComponent_0_5.context);
    };
    View_LoadingComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.LoadingComponent) && (0 === requestNodeIndex))) {
            return this._LoadingComponent_0_5.context;
        }
        return notFoundResult;
    };
    View_LoadingComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._LoadingComponent_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        this._vc_0.detectChangesInNestedViews(throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._LoadingComponent_0_5.context.ngAfterViewInit();
            }
        }
    };
    View_LoadingComponent_Host0.prototype.destroyInternal = function () {
        this._vc_0.destroyNestedViews();
        this.compView_0.destroy();
    };
    View_LoadingComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._vc_0.nativeElement, ctx);
        this._vc_0.visitNestedViewRootNodes(cb, ctx);
        cb(this._el_1, ctx);
    };
    return View_LoadingComponent_Host0;
}(import2.AppView));
exports.LoadingComponentNgFactory = new import9.ComponentFactory('LoadingComponent', View_LoadingComponent_Host0, import0.LoadingComponent);
var styles_LoadingComponent = [];
var renderType_LoadingComponent = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, styles_LoadingComponent, {});
var View_LoadingComponent0 = (function (_super) {
    __extends(View_LoadingComponent0, _super);
    function View_LoadingComponent0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_LoadingComponent0, renderType_LoadingComponent, import7.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import8.ChangeDetectorStatus.CheckAlways);
    }
    View_LoadingComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this.init(null, (this.renderer.directRenderer ? null : []), null);
        return null;
    };
    return View_LoadingComponent0;
}(import2.AppView));
exports.View_LoadingComponent0 = View_LoadingComponent0;
//# sourceMappingURL=data:application/json;base64,