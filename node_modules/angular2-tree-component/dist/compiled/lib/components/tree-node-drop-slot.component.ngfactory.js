/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import0 = require('../../../lib/components/tree-node-drop-slot.component');
var import1 = require('@angular/core/src/change_detection/change_detection_util');
var import2 = require('@angular/core/src/linker/view');
var import3 = require('@angular/core/src/linker/view_utils');
var import5 = require('@angular/core/src/metadata/view');
var import6 = require('@angular/core/src/linker/view_type');
var import7 = require('@angular/core/src/change_detection/constants');
var import8 = require('@angular/core/src/linker/component_factory');
var Wrapper_TreeNodeDropSlot = (function () {
    function Wrapper_TreeNodeDropSlot() {
        this._changed = false;
        this.context = new import0.TreeNodeDropSlot();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
    }
    Wrapper_TreeNodeDropSlot.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_TreeNodeDropSlot.prototype.ngOnDestroy = function () {
    };
    Wrapper_TreeNodeDropSlot.prototype.check_node = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.node = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_TreeNodeDropSlot.prototype.check_dropIndex = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.dropIndex = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_TreeNodeDropSlot.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_TreeNodeDropSlot.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_TreeNodeDropSlot.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_TreeNodeDropSlot.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_TreeNodeDropSlot;
}());
exports.Wrapper_TreeNodeDropSlot = Wrapper_TreeNodeDropSlot;
var renderType_TreeNodeDropSlot_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
var View_TreeNodeDropSlot_Host0 = (function (_super) {
    __extends(View_TreeNodeDropSlot_Host0, _super);
    function View_TreeNodeDropSlot_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_TreeNodeDropSlot_Host0, renderType_TreeNodeDropSlot_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways);
    }
    View_TreeNodeDropSlot_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'TreeNodeDropSlot', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_TreeNodeDropSlot0(this.viewUtils, this, 0, this._el_0);
        this._TreeNodeDropSlot_0_3 = new Wrapper_TreeNodeDropSlot();
        this.compView_0.create(this._TreeNodeDropSlot_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import8.ComponentRef_(0, this, this._el_0, this._TreeNodeDropSlot_0_3.context);
    };
    View_TreeNodeDropSlot_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.TreeNodeDropSlot) && (0 === requestNodeIndex))) {
            return this._TreeNodeDropSlot_0_3.context;
        }
        return notFoundResult;
    };
    View_TreeNodeDropSlot_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._TreeNodeDropSlot_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    View_TreeNodeDropSlot_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    View_TreeNodeDropSlot_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_TreeNodeDropSlot_Host0;
}(import2.AppView));
exports.TreeNodeDropSlotNgFactory = new import8.ComponentFactory('TreeNodeDropSlot', View_TreeNodeDropSlot_Host0, import0.TreeNodeDropSlot);
var styles_TreeNodeDropSlot = [
    '.node-drop-slot { display: block; height: 2px; width: 100%}',
    '.node-drop-slot.is-dragging-over { background: #ddffee; height: 20px; border: 2px dotted #888; }'
];
var renderType_TreeNodeDropSlot = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, styles_TreeNodeDropSlot, {});
var View_TreeNodeDropSlot0 = (function (_super) {
    __extends(View_TreeNodeDropSlot0, _super);
    function View_TreeNodeDropSlot0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_TreeNodeDropSlot0, renderType_TreeNodeDropSlot, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_4 = import1.UNINITIALIZED;
    }
    View_TreeNodeDropSlot0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this._el_1 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'class', 'node-drop-slot'), null);
        this._text_2 = this.renderer.createText(this._el_1, '\n    ', null);
        this._text_3 = this.renderer.createText(parentRenderNode, '\n  ', null);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_1, new import3.InlineArray8(6, 'drop', null, 'dragover', null, 'dragleave', null), this.eventHandler(this.handleEvent_1));
        this.init(null, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._el_1,
            this._text_2,
            this._text_3
        ]), [disposable_0]);
        return null;
    };
    View_TreeNodeDropSlot0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_4 = this.context.node.treeModel.isDraggingOver(this.context);
        if (import3.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            this.renderer.setElementClass(this._el_1, 'is-dragging-over', currVal_4);
            this._expr_4 = currVal_4;
        }
    };
    View_TreeNodeDropSlot0.prototype.handleEvent_1 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'drop')) {
            var pd_sub_0 = (this.context.onDrop($event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'dragover')) {
            var pd_sub_1 = (this.context.onDragOver($event) !== false);
            result = (pd_sub_1 && result);
        }
        if ((eventName == 'dragleave')) {
            var pd_sub_2 = (this.context.onDragLeave() !== false);
            result = (pd_sub_2 && result);
        }
        return result;
    };
    return View_TreeNodeDropSlot0;
}(import2.AppView));
exports.View_TreeNodeDropSlot0 = View_TreeNodeDropSlot0;
//# sourceMappingURL=data:application/json;base64,